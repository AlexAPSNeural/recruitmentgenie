Creating a template for environment variables is essential for managing configuration settings across different environments (development, testing, production). A typical `.env.example` template for a web application might look like this:

```plaintext
# .env.example

# Application
APP_NAME=YourAppName
APP_ENV=development
APP_DEBUG=true
APP_URL=http://localhost

# Database
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=your_database
DB_USERNAME=root
DB_PASSWORD=

# Cache
CACHE_DRIVER=file

# Session
SESSION_DRIVER=file

# Queue
QUEUE_CONNECTION=sync

# Mail
MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS=hello@example.com
MAIL_FROM_NAME="${APP_NAME}"

# AWS
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=

# Third-party services
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
FACEBOOK_CLIENT_ID=
FACEBOOK_CLIENT_SECRET=

# Logging
LOG_CHANNEL=stack

# Custom
CUSTOM_API_KEY=

# Ensure to replace placeholder values with your actual configuration details.

```

To use this template:

1. **Duplicate** the file and rename it to `.env` in your project's root directory.
2. **Fill in** the actual configuration values for your specific environment.
3. **Secure** your `.env` file as it may contain sensitive information. Typically, you should add `.env` to your `.gitignore` file to prevent it from being tracked by version control.

### Usage of Variables

- **APP_ENV** should be set to `production` for production environments. 
- **APP_DEBUG** should be `false` in production to avoid exposing debug information.
- Database, caching, and mail settings should match the services you are using in your infrastructure.

Ensure you update and maintain this template as new environment variables are added to your application.